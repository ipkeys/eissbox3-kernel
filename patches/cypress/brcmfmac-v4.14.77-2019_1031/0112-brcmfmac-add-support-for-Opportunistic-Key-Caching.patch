From 7368127024ba1cb273d1d2a2934ce9e899b2151a Mon Sep 17 00:00:00 2001
From: Chung-Hsien Hsu <stanley.hsu@cypress.com>
Date: Tue, 28 May 2019 04:20:20 -0500
Subject: [PATCH 112/118] brcmfmac: add support for Opportunistic Key Caching

The firmware may have OKC management. This is detected by the driver and
supported via providing the PMK. The authorized flag in ROAM event
should be set for a successful roaming with OKC.

Signed-off-by: Darren Li <hsin-hung.li@cypress.com>
Signed-off-by: Chung-Hsien Hsu <stanley.hsu@cypress.com>
---
 .../broadcom/brcm80211/brcmfmac/cfg80211.c         | 25 +++++++++++++++++++---
 .../broadcom/brcm80211/brcmfmac/cfg80211.h         |  1 +
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
index 314fd98..45ba640 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
@@ -1740,6 +1740,7 @@ static s32 brcmf_set_auth_type(struct net_device *ndev,
 	struct brcmf_cfg80211_profile *profile = &ifp->vif->profile;
 	s32 val;
 	s32 err;
+	s32 okc_enable;
 	const struct brcmf_tlv *rsn_ie;
 	const u8 *ie;
 	u32 ie_len;
@@ -1750,6 +1751,7 @@ static s32 brcmf_set_auth_type(struct net_device *ndev,
 
 	profile->use_fwsup = BRCMF_PROFILE_FWSUP_NONE;
 	profile->is_ft = false;
+	profile->is_okc = false;
 
 	if (!sme->crypto.n_akm_suites)
 		return 0;
@@ -1820,10 +1822,19 @@ static s32 brcmf_set_auth_type(struct net_device *ndev,
 		}
 	}
 
-	if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_1X)
+	if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_1X) {
 		brcmf_dbg(INFO, "using 1X offload\n");
-	else if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_SAE)
+		err = brcmf_fil_bsscfg_int_get(netdev_priv(ndev), "okc_enable",
+					       &okc_enable);
+		if (err) {
+			brcmf_err("get okc_enable failed (%d)\n", err);
+		} else {
+			brcmf_dbg(INFO, "get okc_enable (%d)\n", okc_enable);
+			profile->is_okc = okc_enable;
+		}
+	} else if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_SAE) {
 		brcmf_dbg(INFO, "using SAE offload\n");
+	}
 
 	if (!brcmf_feat_is_enabled(ifp, BRCMF_FEAT_MFP))
 		goto skip_mfp_config;
@@ -5342,6 +5353,7 @@ static int brcmf_cfg80211_set_pmk(struct wiphy *wiphy, struct net_device *dev,
 				  const struct cfg80211_pmk_conf *conf)
 {
 	struct brcmf_if *ifp;
+	int ret;
 
 	brcmf_dbg(TRACE, "enter\n");
 
@@ -5350,6 +5362,13 @@ static int brcmf_cfg80211_set_pmk(struct wiphy *wiphy, struct net_device *dev,
 	if (WARN_ON(ifp->vif->profile.use_fwsup != BRCMF_PROFILE_FWSUP_1X))
 		return -EINVAL;
 
+	if (ifp->vif->profile.is_okc) {
+		ret = brcmf_fil_iovar_data_set(ifp, "okc_info_pmk", conf->pmk,
+					       conf->pmk_len);
+		if (ret < 0)
+			brcmf_err("okc_info_pmk iovar failed: ret=%d\n", ret);
+	}
+
 	return brcmf_set_pmk(ifp, conf->pmk, conf->pmk_len);
 }
 
@@ -5884,7 +5903,7 @@ static s32 brcmf_get_assoc_ies(struct brcmf_cfg80211_info *cfg,
 
 	if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_1X &&
 	    (brcmf_has_pmkid(roam_info.req_ie, roam_info.req_ie_len) ||
-	     profile->is_ft))
+	     profile->is_ft || profile->is_okc))
 		roam_info.authorized = true;
 
 	cfg80211_roamed(ndev, &roam_info, GFP_KERNEL);
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
index 11883c8..53b3247 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
@@ -161,6 +161,7 @@ struct brcmf_cfg80211_profile {
 	struct brcmf_wsec_key key[BRCMF_MAX_DEFAULT_KEYS];
 	enum brcmf_profile_fwsup use_fwsup;
 	bool is_ft;
+	bool is_okc;
 };
 
 /**
-- 
1.9.1

