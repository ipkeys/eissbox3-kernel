From 0838dff9889d09e5a4be575540eb8bc7b836f203 Mon Sep 17 00:00:00 2001
From: Brian Henriquez <brian.henriquez@cypress.com>
Date: Mon, 17 Dec 2018 12:26:07 +0900
Subject: [PATCH 091/118] brcmfmac: make compatible with Fully Preemptile
 Kernel (RT)

Changed mutex locking to completions to make code compatible with
Fully Preemptile Kernel (RT) configuration

Signed-off-by: Brian Henriquez <brian.henriquez@cypress.com>
---
 .../net/wireless/broadcom/brcm80211/brcmfmac/usb.c  | 21 +++++++++------------
 1 file changed, 9 insertions(+), 12 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
index 63d4235..3025b6e 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/usb.c
@@ -103,7 +103,6 @@
 				 */
 #define DL_IMAGE_TOOBIG	7	/* firmware image too big */
 
-
 struct trx_header_le {
 	__le32 magic;		/* "HDR0" */
 	__le32 len;		/* Length of file including header */
@@ -160,7 +159,7 @@ struct brcmf_usbdev_info {
 
 	struct usb_device *usbdev;
 	struct device *dev;
-	struct mutex dev_init_lock;
+	struct completion fw_downloaded;
 
 	int ctl_in_pipe, ctl_out_pipe;
 	struct urb *ctl_urb; /* URB for control endpoint */
@@ -1257,11 +1256,11 @@ static void brcmf_usb_probe_phase2(struct device *dev, int ret,
 	if (ret)
 		goto error;
 
-	mutex_unlock(&devinfo->dev_init_lock);
+	complete(&devinfo->fw_downloaded);
 	return;
 error:
 	brcmf_dbg(TRACE, "failed: dev=%s, err=%d\n", dev_name(dev), ret);
-	mutex_unlock(&devinfo->dev_init_lock);
+	complete(&devinfo->fw_downloaded);
 	device_release_driver(dev);
 }
 
@@ -1308,7 +1307,7 @@ static int brcmf_usb_probe_cb(struct brcmf_usbdev_info *devinfo)
 		if (ret)
 			goto fail;
 		/* we are done */
-		mutex_unlock(&devinfo->dev_init_lock);
+		complete(&devinfo->fw_downloaded);
 		return 0;
 	}
 	bus->chip = bus_pub->devid;
@@ -1369,11 +1368,9 @@ static int brcmf_usb_probe_cb(struct brcmf_usbdev_info *devinfo)
 
 	devinfo->usbdev = usb;
 	devinfo->dev = &usb->dev;
-	/* Take an init lock, to protect for disconnect while still loading.
-	 * Necessary because of the asynchronous firmware load construction
-	 */
-	mutex_init(&devinfo->dev_init_lock);
-	mutex_lock(&devinfo->dev_init_lock);
+
+	/* Initialize fw downloaded completion and mark it as not complete */
+	init_completion(&devinfo->fw_downloaded);
 
 	usb_set_intfdata(intf, devinfo);
 
@@ -1453,7 +1450,7 @@ static int brcmf_usb_probe_cb(struct brcmf_usbdev_info *devinfo)
 	return 0;
 
 fail:
-	mutex_unlock(&devinfo->dev_init_lock);
+	complete(&devinfo->fw_downloaded);
 	kfree(devinfo);
 	usb_set_intfdata(intf, NULL);
 	return ret;
@@ -1468,7 +1465,7 @@ static int brcmf_usb_probe_cb(struct brcmf_usbdev_info *devinfo)
 	devinfo = (struct brcmf_usbdev_info *)usb_get_intfdata(intf);
 
 	if (devinfo) {
-		mutex_lock(&devinfo->dev_init_lock);
+		wait_for_completion(&devinfo->fw_downloaded);
 		/* Make sure that devinfo still exists. Firmware probe routines
 		 * may have released the device and cleared the intfdata.
 		 */
-- 
1.9.1

